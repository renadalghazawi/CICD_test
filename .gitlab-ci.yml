stages:
  - pytest
  - bash-test
  - build
  - container-test
  - publish

variables:
  GIT_STRATEGY: clone
  VERSION_NUMBER: "1.0.0"
  CONTAINER_NAME: "newmath"

before_script:
  - whoami # Who's running the CI?
  - env    # spits out all environment variables (including CI)
  - ls     # shows the current directory contents for debugging.


# Here, we're running a stage to verify that the package is good before we try to build.
#  This way, we check for functionality before the possibly time-consuming container build.
run_pytest:
  stage: pytest
  script:
    - module add python/3.10.x-anaconda
    - python3 -m pytest -v --junitxml=report.xml # Output junit report for viewing in GitLab.
  artifacts:
    when: always
    reports:
      junit: report.xml

verify-bash:
  stage: bash-test
  script:
    - python3 main.py 2 4
  only:
    - master

build:
  stage: build
  variables:
    IMAGE_TEST_TAG: $CI_REGISTRY_IMAGE/${CONTAINER_NAME}:test_${VERSION_NUMBER}
  script:
    - podman build -t $IMAGE_TEST_TAG . 
    - podman login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - podman push $IMAGE_TEST_TAG
  only:
    - master


verify-container:
  stage: container-test
  variables:
    IMAGE_TEST_TAG: $CI_REGISTRY_IMAGE/${CONTAINER_NAME}:test_${VERSION_NUMBER}
  script:
    - podman pull $IMAGE_TEST_TAG . 
    - podman run $IMAGE_TEST_TAG 2 4
  only:
    - master

    
publish-container:
  stage: publish
  variables:
    IMAGE_TEST_TAG: $CI_REGISTRY_IMAGE/${CONTAINER_NAME}:test_${VERSION_NUMBER}
    IMAGE_TAG: $CI_REGISTRY_IMAGE/${CONTAINER_NAME}:${VERSION_NUMBER}
  script:
    - podman pull ${IMAGE_TEST_TAG}
    - podman tag ${IMAGE_TEST_TAG} ${IMAGE_TAG}
    - podman push $IMAGE_TAG
  only:
    - master

